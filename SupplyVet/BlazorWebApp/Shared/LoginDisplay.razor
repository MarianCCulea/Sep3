@inject IJSRuntime jsRuntime
@inject IUserData userdata
@inject NavigationManager manager


<AuthorizeView>
    <Authorized>
        <NavLink class="nav-link" href="cart" Match="NavLinkMatch.All">
            <span class="oi oi-cart" aria-hidden="true"></span> Cart
        </NavLink>

        <button @onclick="()=>Confirm(context.User.Identity.Name)" class="nav-link btn btn-link">View Profile</button>
        <button @onclick="Logout" class="nav-link btn btn-link">Log out</button>


    </Authorized>
    <NotAuthorized>
        <a href="register">Register</a>
        <a href="login">Login</a>
    </NotAuthorized>
</AuthorizeView>


@code {
    public async Task Logout()
    {
        Console.WriteLine("Logout here");
        var interop = new Interop(jsRuntime);
        string antiforgerytoken = await interop.GetElementByName("__RequestVerificationToken");

        // Here I provide fields matching the arguments of my logout method, i.e. none. Could have a returnURL
        // see the example downloadable from here:
        // https://www.oqtane.org/Resources/Blog/PostId/527/exploring-authentication-in-blazor?fbclid=IwAR0rbQkY47cHHxs29HWCk0RggH7GHeLDx3kJ4vwmgUGMTsFU3hxpsQ9ybZo
        var fields = new { __RequestVerificationToken = antiforgerytoken };
        await interop.SubmitForm("/logoutRequester/", fields);
    }

     protected async Task Confirm(string id)
    {
        int userid=Int32.Parse(id);
        await userdata.GetUserAsync(userid);
        manager.NavigateTo("/manage");
   
    }
}